//const { DB_USER, DB_PASSWORD, DB_HOST, DB_DATABASE } = process.env;

datasource db {
    provider= "postgresql"
    url = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model usuario {
  id                 String       @id @default(uuid()) @db.VarChar(36)
  name               String
  image              String?
  email              String       @unique
  emailVerified      DateTime?
  hashedPassword     String?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  isAdmin            Boolean      @default(false)
  sessions           session[]
  accounts           account[]
  ratings            rating[]
}

model account {
  id                 String       @id @default(uuid()) @db.VarChar(36) 
  userId             String    
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?   
  access_token       String?   
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?   
  session_state      String?
  user               usuario      @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model session {
  id                 String       @id @default(uuid()) @db.VarChar(36)
  sessionToken       String       @unique
  userId             String    
  expires            DateTime
  user               usuario      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model verificationToken {
  id                 String       @id @default(uuid()) @db.VarChar(36)
  identifier         String
  token              String       @unique
  expires            DateTime
  @@unique([identifier, token])
}

model videojuego {
  id                 String       @id @default(uuid()) @db.VarChar(36)
  title              String
  description        String
  price              String
  image              String
  code               Int          @unique @default(autoincrement())
  categories         categories[] 
  languages          languages[]  
  consoles           consoles[]   
  ratings            rating[]
}

model categories {
  id                 String       @id @default(uuid()) @db.VarChar(36)
  name               String
  videojuegos        videojuego?  @relation(fields: [videojuegoId], references: [id])
  videojuegoId       String?
}

model languages {
  id                 String       @id @default(uuid()) @db.VarChar(36)
  name               String
  videojuegos        videojuego?  @relation(fields: [videojuegoId], references: [id])
  videojuegoId       String?
}

model consoles {
  id                 String       @id @default(uuid()) @db.VarChar(36)
  name               String
  videojuegos        videojuego?  @relation(fields: [videojuegoId], references: [id])
  videojuegoId       String?
}

model rating {
  id                 String       @id @default(uuid()) @db.VarChar(36)
  score              Int
  videjuego          videojuego   @relation(fields: [videojuegoId], references: [id])
  videojuegoId       String
  usuario            usuario      @relation(fields: [usuarioId], references: [id])
  usuarioId          String
}

